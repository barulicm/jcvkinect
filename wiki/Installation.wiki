#summary Setup instructions for using JCVKinect
#labels Featured,Phase-Deploy

= Introduction =

JCVKinect is supposed to be an easy to set up and to use class set. There are only two class files necessary to get the Kinect to provide OpenCV image objects.


= Setup =

First make sure you have correctly installed OpenKinect's libfreenect library and Java JNA wrapper and the latest version of OpenCV (2.2 @ time of writing).
With those libraries installed, here's how to setup JCVKinect
  # Download JCVKinect.java and JCVKinectDelegate.java from the source tree.
  # Add those two Java files to your project's source folder.
  # Import JCVKinect and JCVKinectDelegate to your source code
{{{
import com.marist.cs2011.JCVKinect;
import com.marist.cs2011.JCVKinectDelegate;
}}}


= Use =
  # Create a new _JCVKinect_ object
{{{
JCVKinect kinect = new JCVKinect();
}}}
  # Set the delegate of the new Kinect object to a class of your own that implements the _JCVKinectDelegate_ interface.
{{{
kinect.setDelegate( [delegate variable name goes here] );
}}}
  # Initialize the Kinect device. The int argument here indicates which device you want to use if more than one are plugged in.
{{{
kinect.initDevice(0);
}}}
  # Call startDepth(); or startRGB(); to begin the depth/video feeds respectively.
  # When you are done with the Kinect data feed, call stopDepth(); or stopRGB(); You must call the stop command that is appropriate for the start command you called earlier.
  # Finally, call close(); in order to make sure the Kinect device is properly shut down and available for the next program that wishes to use it.
{{{
kinect.close();
}}}

The delegate class *must* implement _JCVKinectDelegate_ and define two methods
  * onRecievedDepthFrame(IplImage image, JCVKinect device);
  * onRecievedRGBFrame(IplImage image, JCVKinect device);

These delegate callbacks are called by a _JCVKinect_ object to provide the depth/RGB data from the Kinect.

= Example =
{{{

import static com.googlecode.javacv.cpp.opencv_core.*;
import org.openkinect.freenect.LedStatus;
import com.googlecode.javacv.*;

import com.marist.cs2011.JCVKinect;
import com.marist.cs2011.JCVKinectDelegate;

/*
 * Simple example using JCVKinect, OpenKinect, and JavaCV to display depth and RGB feed on screen.
 */

public class TestJCVKinect implements JCVKinectDelegate{

	CanvasFrame RGBcanvas;
	CanvasFrame DepthCanvas;
	
	public TestJCVKinect(){
		RGBcanvas = new CanvasFrame("Tester - RGB");
		DepthCanvas = new CanvasFrame("Tester - Depth");
		DepthCanvas.setBounds(640, 0, DepthCanvas.getWidth(), DepthCanvas.getHeight());
	}
	
	public static void main(String[] args) {
		TestJCVKinect tester = new TestJCVKinect();
		JCVKinect kinect = new JCVKinect();
		if(kinect.getNumberOfDevices() > 0){
			kinect.setDelegate(tester);
			kinect.initDevice(0);
			kinect.getDevice().setLed(LedStatus.GREEN);
			kinect.getDevice().setTiltAngle(10);
			kinect.startRGB();
			kinect.startDepth();
			while(tester.DepthCanvas.isVisible() || tester.RGBcanvas.isVisible()) System.out.print("");
			kinect.stopRGB();
			kinect.stopDepth();
			kinect.getDevice().setLed(LedStatus.BLINK_GREEN);
			kinect.close();
		}
		System.exit(0);
	}

	@Override
	public void onRecievedDepthFrame(IplImage image, JCVKinect device) {
		DepthCanvas.showImage(image);
	}

	@Override
	public void onRecievedRGBFrame(IplImage image, JCVKinect device) {
		RGBcanvas.showImage(image);
	}

}

}}}